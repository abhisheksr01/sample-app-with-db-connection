#!/usr/bin/env bash

#### Emoji Function
emojiFunction() {
  for i in {1..95}; do
    printf "$1"
  done
  printf '\n'
}

#### Start Scanning the image locally & publish report
echo "Starting vulnerability checks...."
TAG=$(cat version/docker-version.txt)
TAG=$([ "${TAG}" == "" ] && echo "latest" || echo "${TAG}")
echo "Scanning Tag : ${TAG}"
mkdir reports

time_stamp="$(date +'%d-%m-%Y-%r')"
echo "Checking Vulnerabilities at: ${time_stamp}"
#### The real game starts here
trivy image "${DOCKER_USER}/${DOCKER_IMAGE}:${TAG}" > reports/"vulnerability-report-${time_stamp}".txt

critical_vulnerability=$(grep CRITICAL: reports/"vulnerability-report-${time_stamp}".txt | sed -n -e 's/^.*CRITICAL: //p' | cut -c1-1)
high_vulnerability=$(grep CRITICAL: reports/"vulnerability-report-${time_stamp}".txt | sed -n -e 's/^.*HIGH: //p' | cut -c1-1)
echo "Vulnerabilities Report Generated..."

#### Check if the report has Critical or High Vulnerability
scan_status=$(grep Total: reports/"vulnerability-report-${time_stamp}".txt)
scan_status=$(grep Total: reports/"vulnerability-report-${time_stamp}".txt)
if [[ $critical_vulnerability != "0
0" ]]; then
  printf "\033[91m\033[1m\n"
  emojiFunction "\xE2\x98\xA0"
  echo "Critical Vulnerabilities Identified review the attached report."
  echo "Scan status : ${scan_status}"
  echo "Fix the vulnerabilities to proceed with the deployment."
  emojiFunction "\xE2\x98\xA0"
  exit 1
else
  printf "\033[92m"
  emojiFunction "\xE2\x99\xA0"
  echo "No Critical Vulnerabilities Identified, review full list of other vulnerabilities identified."
  echo "Scan status : ${scan_status}"
  emojiFunction "\xE2\x99\xA0"
  echo -e "\033[0m"
fi
echo "Trivy Vulnerabilities Check Ends.."
